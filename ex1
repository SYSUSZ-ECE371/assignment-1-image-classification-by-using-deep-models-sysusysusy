# -*- coding: utf-8 -*-
"""“classfication

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nXvmRVY__khZ2Y9EHjioeI9SSC6KHB1K

ex1
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import shutil
import random

# 配置路径和参数
source_dir = '/content/drive/MyDrive/flower_dataset'  # 原始数据集目录
target_dir = 'flower_organized'  # 目标目录
train_ratio = 0.8
classes = ['daisy', 'dandelion', 'rose', 'sunflower', 'tulip']  # 按顺序的类别名称

# 创建目标目录
os.makedirs(os.path.join(target_dir, 'train'), exist_ok=True)
os.makedirs(os.path.join(target_dir, 'val'), exist_ok=True)

# 写入类别文件
with open(os.path.join(target_dir, 'classes.txt'), 'w') as f:
    f.write('\n'.join(classes))

# 划分数据集并复制文件
for cls in classes:
    cls_dir = os.path.join(source_dir, cls)
    if not os.path.exists(cls_dir):
        continue

    images = [img for img in os.listdir(cls_dir) if img.lower().endswith(('.jpg', '.jpeg', '.png'))]
    random.shuffle(images)
    split = int(len(images) * train_ratio)
    train_imgs = images[:split]
    val_imgs = images[split:]

    # 复制训练集
    train_cls_path = os.path.join(target_dir, 'train', cls)
    os.makedirs(train_cls_path, exist_ok=True)
    for img in train_imgs:
        shutil.copy(os.path.join(cls_dir, img), os.path.join(train_cls_path, img))

    # 复制验证集
    val_cls_path = os.path.join(target_dir, 'val', cls)
    os.makedirs(val_cls_path, exist_ok=True)
    for img in val_imgs:
        shutil.copy(os.path.join(cls_dir, img), os.path.join(val_cls_path, img))

# 生成标注文件
def generate_annotations(data_type):
    annotations = []
    base_path = os.path.join(target_dir, data_type)
    for class_idx, cls in enumerate(classes):
        cls_path = os.path.join(base_path, cls)
        for img in os.listdir(cls_path):
            rel_path = f"{data_type}/{cls}/{img}".replace(os.sep, '/')
            annotations.append(f"{rel_path} {class_idx}")
    return annotations

with open(os.path.join(target_dir, 'train.txt'), 'w') as f:
    f.write('\n'.join(generate_annotations('train')))

with open(os.path.join(target_dir, 'val.txt'), 'w') as f:
    f.write('\n'.join(generate_annotations('val')))

print("数据集已成功准备！")

"""1. 数据集准备与迁移"""

# (2) 迁移到项目目录
!mkdir -p /content/flower_organized
!cp -r flower_organized/* ./data/flower_organized

# (3) Colab 用户集成Google Drive
from google.colab import drive
drive.mount('/content/drive')
!cp -r "/content/drive/MyDrive/flower_organized" "/content/data/flower_organized"
# (3) Colab 用户集成Google Drive
from google.colab import drive
drive.mount('/content/drive')
!cp -r "/content/drive/MyDrive/flower_organized" "/content/data/flower_organized"

"""2. 下载预训练模型"""

# 在Colab或本地创建checkpoints目录
!mkdir -p /content/checkpoints

# 下载ResNet-50预训练权重（以MMClassification官方模型为例）
!wget https://download.openmmlab.com/mmclassification/v0/resnet/resnet50_8xb32_in1k_20210831-ea4938fc.pth -P /content/checkpoints

"""3. 修改配置文件（关键步骤）
创建文件 configs/flower_finetune.py，内容如下：
"""

# flower_finetune.py
_base_ = [
    'configs/_base_/models/resnet50.py',          # 继承ResNet-50架构
    'configs/_base_/datasets/imagenet_bs32.py',   # 继承ImageNet数据配置
    'configs/_base_/schedules/imagenet_bs256.py', # 继承学习率策略
    'configs/_base_/default_runtime.py'           # 继承运行时配置
]

# --- 修改核心参数 ---
# 1. 模型适配5分类任务
model = dict(
    head=dict(
        num_classes=5,    # 修改分类头为5类
        topk=(1,)         # 仅评估top-1准确率
    )
)

# 2. 数据集路径配置
data = dict(
    samples_per_gpu=32,   # 根据GPU调整batch size
    train=dict(
        data_prefix='/content/data/flower_organized/train',  # 训练集路径
        ann_file='/content/data/flower_organized/train.txt', # 训练标注文件
        classes='/content/data/flower_organized/classes.txt' # 类别文件
    ),
    val=dict(
        data_prefix='/content/data/flower_organized/val',    # 验证集路径
        ann_file='/content/data/flower_organized/val.txt',
        classes='/content/data/flower_organized/classes.txt'
    )
)

# 3. 优化器与学习率调整（微调专用）
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0001)  # 初始lr=0.001
runner = dict(type='EpochBasedRunner', max_epochs=10)  # 训练10个epoch

# 4. 指定预训练权重路径
load_from = '/content/checkpoints/resnet50_8xb32_in1k_20210831-ea4938fc.pth'

"""4. 安装依赖库（Colab环境）"""

!pip install openmim
!mim install mmcls

"""5. 启动微调训练"""

# 使用MIM工具启动训练
!mim train mmcls \
    configs/flower_finetune.py \          # 配置文件路径 \
    --work-dir /content/work_dir \        # 指定输出目录 \
    --cfg-options evaluation.metric='accuracy'  # 强制使用top-1评估

"""6. 监控训练输出"""

Epoch [1][10/50]  lr: 1.00e-03  eta: 0:10:00  loss: 1.2345  accuracy: 0.6500
Epoch [2][10/50]  lr: 9.50e-04  eta: 0:9:30  loss: 0.9876  accuracy: 0.7500
...

"""7. 验证模型性能"""

# 使用最佳模型验证
!mim test mmcls \
    configs/flower_finetune.py \
    /content/work_dir/best_accuracy_epoch_5.pth \
    --metrics accuracy \
    --cfg-options \
        data.val.data_prefix='/content/data/flower_organized/val' \
        data.val.ann_file='/content/data/flower_organized/val.txt'
